openapi: "3.0.0"
info:
  title: Obsidian Echo API
  description: >
    Obsidian Echo is a multi-user integration platform that enables external systems (e.g., AI-powered bots)
    to add notes directly into your Obsidian vault. The API facilitates user registration, authentication,
    vault management, and note processing (create, claim, download, and confirm), ensuring each note is delivered exactly once.
  version: "1.0.0"
servers:
  - url: "http://localhost:8000"
    description: Local development server

paths:
  /api/register:
    post:
      summary: Register a new user
      description: Create a new user account.
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request.
  /api/login:
    post:
      summary: Authenticate a user
      description: Logs in a user and returns a JWT access token.
      requestBody:
        description: User login credentials (form data).
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: Authentication successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Unauthorized.
  /api/me:
    get:
      summary: Get current user's profile
      description: Retrieve the profile information of the authenticated user.
      security:
        - JWT: []
      responses:
        "200":
          description: User profile retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized.
  /api/vaults:
    get:
      summary: List vaults for the authenticated user
      security:
        - JWT: []
      responses:
        "200":
          description: A list of vaults.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VaultResponse"
        "401":
          description: Unauthorized.
    post:
      summary: Create a new vault
      security:
        - JWT: []
      requestBody:
        description: Vault details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VaultCreate"
      responses:
        "201":
          description: Vault created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VaultResponse"
        "401":
          description: Unauthorized.
  /api/vaults/{vaultId}:
    parameters:
      - in: path
        name: vaultId
        required: true
        description: UUID of the vault.
        schema:
          type: string
          format: uuid
    get:
      summary: Get vault details
      security:
        - JWT: []
      responses:
        "200":
          description: Vault details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VaultResponse"
        "404":
          description: Vault not found.
        "401":
          description: Unauthorized.
    put:
      summary: Update vault information
      security:
        - JWT: []
      requestBody:
        description: Updated vault data.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VaultCreate"
      responses:
        "200":
          description: Vault updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VaultResponse"
        "404":
          description: Vault not found.
        "401":
          description: Unauthorized.
    delete:
      summary: Delete a vault
      security:
        - JWT: []
      responses:
        "204":
          description: Vault deleted successfully.
        "404":
          description: Vault not found.
        "401":
          description: Unauthorized.
  /api/notes:
    get:
      summary: List notes from a vault
      description: >
        Retrieve a list of notes for the vault.
        Optionally, filter by note state (PENDING, CLAIMED, DELIVERED) and paginate with limit and offset.
      security:
        - VaultToken: []
      parameters:
        - name: state
          in: query
          description: Filter notes by state.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of returned results.
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Offset for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: A list of notes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NoteResponse"
        "401":
          description: Unauthorized.
    post:
      summary: Create a new note
      description: Create a new note in a vault. The note is initially marked as PENDING.
      security:
        - VaultToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteCreate"
      responses:
        "201":
          description: Note created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "401":
          description: Unauthorized.
  /api/notes/{noteId}/claim:
    post:
      summary: Claim a note for download
      description: >
        Attempt to atomically claim a note (transition it from PENDING to CLAIMED)
        by providing a client_id. Only one client can claim a note.
      security:
        - VaultToken: []
      parameters:
        - in: path
          name: noteId
          required: true
          description: UUID of the note.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
              required:
                - client_id
      responses:
        "200":
          description: Note claimed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "409":
          description: Note already claimed or not in PENDING state.
        "401":
          description: Unauthorized.
  /api/notes/{noteId}/download:
    get:
      summary: Download a claimed note
      security:
        - VaultToken: []
      parameters:
        - in: path
          name: noteId
          required: true
          description: UUID of the note.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Note content downloaded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "404":
          description: Note not found.
        "401":
          description: Unauthorized.
  /api/notes/{noteId}/confirm:
    post:
      summary: Confirm note delivery
      description: >
        Confirm that the note has been successfully saved locally.
        This changes the note's state to DELIVERED.
      security:
        - VaultToken: []
      parameters:
        - in: path
          name: noteId
          required: true
          description: UUID of the note.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Note confirmed and marked as DELIVERED.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "409":
          description: Note not in CLAIMED state or not found.
        "401":
          description: Unauthorized.

components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token used for user authentication.
    VaultToken:
      type: http
      scheme: bearer
      bearerFormat: API Token
      description: Vault API token used for note endpoints.
  schemas:
    UserRegister:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - created_at
        - updated_at
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: "bearer"
      required:
        - access_token
        - token_type
    VaultCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    VaultResponse:
      allOf:
        - $ref: "#/components/schemas/VaultCreate"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            user_id:
              type: string
              format: uuid
            token:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
          required:
            - id
            - user_id
            - token
            - created_at
            - updated_at
    NoteCreate:
      type: object
      properties:
        external_id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        content:
          type: string
      required:
        - content
    NoteResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        vault_id:
          type: string
          format: uuid
        external_id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        content:
          type: string
        state:
          type: string
          enum:
            - PENDING
            - CLAIMED
            - DELIVERED
        claim_owner:
          type: string
          nullable: true
        claim_timestamp:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - vault_id
        - content
        - state
        - created_at
        - updated_at
